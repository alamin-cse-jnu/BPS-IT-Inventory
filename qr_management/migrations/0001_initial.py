# Generated by Django 4.2.7 on 2025-07-08 07:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("inventory", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="QRCampaign",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "campaign_type",
                    models.CharField(
                        choices=[
                            ("AUDIT", "Audit Campaign"),
                            ("VERIFICATION", "Verification Campaign"),
                            ("INVENTORY_CHECK", "Inventory Check"),
                            ("LOCATION_UPDATE", "Location Update Campaign"),
                            ("TRAINING", "Training Campaign"),
                            ("COMPLIANCE", "Compliance Check"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PLANNED", "Planned"),
                            ("ACTIVE", "Active"),
                            ("PAUSED", "Paused"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PLANNED",
                        max_length=15,
                    ),
                ),
                (
                    "target_devices",
                    models.JSONField(
                        default=list,
                        help_text="List of device IDs or filter criteria for target devices",
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "target_scan_percentage",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Target percentage of devices to scan",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "expected_completion_days",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("total_target_devices", models.PositiveIntegerField(default=0)),
                ("devices_scanned", models.PositiveIntegerField(default=0)),
                ("successful_scans", models.PositiveIntegerField(default=0)),
                ("discrepancies_found", models.PositiveIntegerField(default=0)),
                (
                    "scan_requirements",
                    models.JSONField(
                        default=dict,
                        help_text="Specific requirements for scans in this campaign",
                    ),
                ),
                (
                    "notification_settings",
                    models.JSONField(
                        default=dict,
                        help_text="Notification settings for campaign progress",
                    ),
                ),
                (
                    "assigned_to",
                    models.ManyToManyField(
                        help_text="Users assigned to execute this campaign",
                        related_name="assigned_qr_campaigns",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_qr_campaigns",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target_departments",
                    models.ManyToManyField(
                        blank=True,
                        related_name="qr_campaigns",
                        to="inventory.department",
                    ),
                ),
                (
                    "target_locations",
                    models.ManyToManyField(
                        blank=True, related_name="qr_campaigns", to="inventory.location"
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="QRCodeBatch",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(help_text="Batch job name", max_length=200)),
                (
                    "generation_type",
                    models.CharField(
                        choices=[
                            ("SINGLE", "Single Device"),
                            ("BATCH", "Batch Generation"),
                            ("DEPARTMENT", "Department Batch"),
                            ("CATEGORY", "Category Batch"),
                            ("CUSTOM_LIST", "Custom Device List"),
                        ],
                        default="BATCH",
                        max_length=15,
                    ),
                ),
                (
                    "device_filter",
                    models.JSONField(
                        default=dict,
                        help_text="Filters applied to select devices for QR generation",
                    ),
                ),
                (
                    "device_list",
                    models.JSONField(
                        default=list,
                        help_text="Specific list of device IDs for custom generation",
                    ),
                ),
                (
                    "device_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of devices in batch"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "output_format",
                    models.CharField(
                        choices=[
                            ("PNG", "PNG Images"),
                            ("PDF", "PDF Document"),
                            ("ZIP", "ZIP Archive"),
                            ("LABEL_SHEET", "Label Sheet"),
                        ],
                        default="ZIP",
                        max_length=15,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("progress_percentage", models.PositiveIntegerField(default=0)),
                ("current_device", models.CharField(blank=True, max_length=50)),
                ("generated_count", models.PositiveIntegerField(default=0)),
                ("failed_count", models.PositiveIntegerField(default=0)),
                (
                    "output_file",
                    models.FileField(blank=True, null=True, upload_to="qr_batches/"),
                ),
                ("error_log", models.TextField(blank=True)),
                (
                    "failed_devices",
                    models.JSONField(
                        default=list,
                        help_text="List of device IDs that failed to generate",
                    ),
                ),
                ("generation_time_seconds", models.FloatField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_batches",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QRCodeScan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "scan_type",
                    models.CharField(
                        choices=[
                            ("VERIFICATION", "Device Verification"),
                            ("INVENTORY", "Inventory Check"),
                            ("ASSIGNMENT", "Assignment Verification"),
                            ("MAINTENANCE", "Maintenance Scan"),
                            ("AUDIT", "Audit Scan"),
                            ("BATCH_VERIFICATION", "Batch Verification"),
                            ("MOBILE_SCAN", "Mobile App Scan"),
                            ("LOCATION_UPDATE", "Location Update"),
                            ("ASSIGNMENT_CHECK", "Assignment Check"),
                            ("TRANSFER", "Device Transfer"),
                            ("GENERAL", "General Scan"),
                        ],
                        default="VERIFICATION",
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "device_status_at_scan",
                    models.CharField(
                        help_text="Device status when scanned", max_length=20
                    ),
                ),
                ("verification_success", models.BooleanField(default=True)),
                (
                    "discrepancies_found",
                    models.TextField(
                        blank=True,
                        help_text="Details of any discrepancies found during verification",
                    ),
                ),
                (
                    "actions_taken",
                    models.TextField(
                        blank=True, help_text="Actions taken as a result of the scan"
                    ),
                ),
                (
                    "scan_notes",
                    models.TextField(
                        blank=True, help_text="Additional notes from the scan session"
                    ),
                ),
                (
                    "gps_coordinates",
                    models.CharField(
                        blank=True,
                        help_text="GPS coordinates if available (latitude,longitude)",
                        max_length=100,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "device_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Information about the scanning device",
                    ),
                ),
                (
                    "app_version",
                    models.CharField(
                        blank=True,
                        help_text="Mobile app version if applicable",
                        max_length=50,
                    ),
                ),
                (
                    "scan_duration_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time taken to complete scan in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "batch_scan_id",
                    models.UUIDField(
                        blank=True,
                        help_text="ID linking scans performed in the same batch",
                        null=True,
                    ),
                ),
                (
                    "batch_sequence",
                    models.PositiveIntegerField(
                        blank=True, help_text="Order within batch scan", null=True
                    ),
                ),
                (
                    "assigned_staff_at_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="Staff assigned to device at scan time",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="qr_scans_as_assignee",
                        to="inventory.staff",
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_scans",
                        to="inventory.device",
                    ),
                ),
                (
                    "device_location_at_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="Device's recorded location at scan time",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="device_location_scans",
                        to="inventory.location",
                    ),
                ),
                (
                    "scan_location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Location where the scan was performed",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="qr_scans_performed",
                        to="inventory.location",
                    ),
                ),
                (
                    "scanned_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="qr_scans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="QRVerificationRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("LOCATION_CHECK", "Location Verification"),
                            ("ASSIGNMENT_CHECK", "Assignment Verification"),
                            ("STATUS_CHECK", "Status Verification"),
                            ("TIME_RESTRICTION", "Time-based Restriction"),
                            ("USER_AUTHORIZATION", "User Authorization"),
                            ("DEPARTMENT_RESTRICTION", "Department Restriction"),
                            ("CUSTOM_VALIDATION", "Custom Validation"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Information"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="WARNING",
                        max_length=10,
                    ),
                ),
                (
                    "rule_config",
                    models.JSONField(
                        default=dict, help_text="Configuration parameters for the rule"
                    ),
                ),
                (
                    "validation_query",
                    models.TextField(
                        blank=True, help_text="SQL query or validation logic"
                    ),
                ),
                (
                    "applies_to_scan_types",
                    models.JSONField(
                        default=list,
                        help_text="List of scan types this rule applies to",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_blocking",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this rule blocks the scan if violated",
                    ),
                ),
                (
                    "auto_remediation",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to attempt automatic remediation",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_triggered", models.DateTimeField(blank=True, null=True)),
                ("trigger_count", models.PositiveIntegerField(default=0)),
                (
                    "applies_to_departments",
                    models.ManyToManyField(
                        blank=True,
                        related_name="qr_verification_rules",
                        to="inventory.department",
                    ),
                ),
                (
                    "applies_to_device_types",
                    models.ManyToManyField(
                        blank=True,
                        related_name="qr_verification_rules",
                        to="inventory.devicetype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_qr_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["severity", "name"],
            },
        ),
        migrations.CreateModel(
            name="QRMobileSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("SCAN_SESSION", "Scanning Session"),
                            ("VERIFICATION_SESSION", "Verification Session"),
                            ("BATCH_SESSION", "Batch Scanning Session"),
                            ("AUDIT_SESSION", "Audit Session"),
                        ],
                        default="SCAN_SESSION",
                        max_length=25,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "device_info",
                    models.JSONField(
                        default=dict, help_text="Mobile device information"
                    ),
                ),
                ("app_version", models.CharField(blank=True, max_length=50)),
                ("scans_performed", models.PositiveIntegerField(default=0)),
                ("successful_scans", models.PositiveIntegerField(default=0)),
                ("failed_scans", models.PositiveIntegerField(default=0)),
                (
                    "start_gps",
                    models.CharField(
                        blank=True, help_text="Starting GPS coordinates", max_length=100
                    ),
                ),
                (
                    "end_gps",
                    models.CharField(
                        blank=True, help_text="Ending GPS coordinates", max_length=100
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="qr_mobile_sessions",
                        to="inventory.location",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_mobile_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="QRCodeTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(help_text="Template name", max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard QR Code"),
                            ("WITH_LOGO", "QR Code with Logo"),
                            ("LABEL", "Label Format"),
                            ("ASSET_TAG", "Asset Tag Format"),
                            ("MINI", "Mini QR Code"),
                            ("CUSTOM", "Custom Format"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "size",
                    models.CharField(
                        choices=[
                            ("SMALL", "Small (100x100)"),
                            ("MEDIUM", "Medium (200x200)"),
                            ("LARGE", "Large (400x400)"),
                            ("XLARGE", "Extra Large (600x600)"),
                            ("CUSTOM", "Custom Size"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                (
                    "custom_width",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Custom width in pixels",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "custom_height",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Custom height in pixels",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "qr_size",
                    models.PositiveIntegerField(
                        default=10, help_text="QR code box size"
                    ),
                ),
                (
                    "qr_border",
                    models.PositiveIntegerField(
                        default=4, help_text="QR code border size"
                    ),
                ),
                (
                    "error_correction",
                    models.CharField(
                        choices=[
                            ("L", "Low (~7%)"),
                            ("M", "Medium (~15%)"),
                            ("Q", "Quartile (~25%)"),
                            ("H", "High (~30%)"),
                        ],
                        default="L",
                        help_text="Error correction level",
                        max_length=1,
                    ),
                ),
                (
                    "foreground_color",
                    models.CharField(
                        default="#000000",
                        help_text="QR code foreground color (hex)",
                        max_length=7,
                    ),
                ),
                (
                    "background_color",
                    models.CharField(
                        default="#FFFFFF",
                        help_text="QR code background color (hex)",
                        max_length=7,
                    ),
                ),
                ("include_logo", models.BooleanField(default=False)),
                (
                    "logo_file",
                    models.ImageField(blank=True, null=True, upload_to="qr_logos/"),
                ),
                (
                    "logo_size_percentage",
                    models.PositiveIntegerField(
                        default=20,
                        help_text="Logo size as percentage of QR code",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(30),
                        ],
                    ),
                ),
                ("include_device_name", models.BooleanField(default=True)),
                ("include_asset_tag", models.BooleanField(default=True)),
                ("include_category", models.BooleanField(default=False)),
                ("include_brand_model", models.BooleanField(default=False)),
                ("include_text_label", models.BooleanField(default=True)),
                (
                    "label_template",
                    models.CharField(
                        default="{device_id}",
                        help_text="Label template using placeholders like {device_id}, {device_name}",
                        max_length=200,
                    ),
                ),
                (
                    "label_position",
                    models.CharField(
                        choices=[
                            ("TOP", "Top"),
                            ("BOTTOM", "Bottom"),
                            ("LEFT", "Left"),
                            ("RIGHT", "Right"),
                        ],
                        default="BOTTOM",
                        max_length=10,
                    ),
                ),
                (
                    "label_width",
                    models.PositiveIntegerField(
                        default=600, help_text="Label width in pixels"
                    ),
                ),
                (
                    "label_height",
                    models.PositiveIntegerField(
                        default=200, help_text="Label height in pixels"
                    ),
                ),
                ("font_size_large", models.PositiveIntegerField(default=24)),
                ("font_size_medium", models.PositiveIntegerField(default=18)),
                ("font_size_small", models.PositiveIntegerField(default=14)),
                (
                    "qr_data_template",
                    models.JSONField(
                        default=dict, help_text="Template for data included in QR code"
                    ),
                ),
                ("include_device_details", models.BooleanField(default=True)),
                ("include_assignment_info", models.BooleanField(default=True)),
                ("include_location_info", models.BooleanField(default=True)),
                ("include_verification_url", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("is_system_template", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_qr_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="QRCodePrintJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "print_format",
                    models.CharField(
                        choices=[
                            ("AVERY_5160", "Avery 5160 (Address Labels)"),
                            ("AVERY_5167", "Avery 5167 (Return Labels)"),
                            ("AVERY_8160", "Avery 8160 (Mini Labels)"),
                            ("CUSTOM_SHEET", "Custom Label Sheet"),
                            ("INDIVIDUAL", "Individual Labels"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "paper_size",
                    models.CharField(
                        choices=[
                            ("A4", "A4 (210 x 297 mm)"),
                            ("LETTER", "Letter (8.5 x 11 in)"),
                            ("A3", "A3 (297 x 420 mm)"),
                            ("LEGAL", "Legal (8.5 x 14 in)"),
                        ],
                        default="A4",
                        max_length=10,
                    ),
                ),
                ("copies_per_device", models.PositiveIntegerField(default=1)),
                ("labels_per_row", models.PositiveIntegerField(default=3)),
                ("labels_per_column", models.PositiveIntegerField(default=10)),
                (
                    "margin_top",
                    models.FloatField(default=0.5, help_text="Top margin in inches"),
                ),
                (
                    "margin_left",
                    models.FloatField(default=0.5, help_text="Left margin in inches"),
                ),
                (
                    "label_width",
                    models.FloatField(default=2.5, help_text="Label width in inches"),
                ),
                (
                    "label_height",
                    models.FloatField(default=1.0, help_text="Label height in inches"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("READY", "Ready to Print"),
                            ("PRINTED", "Printed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                (
                    "print_file",
                    models.FileField(blank=True, null=True, upload_to="qr_print_jobs/"),
                ),
                ("total_labels", models.PositiveIntegerField(default=0)),
                ("total_pages", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("printed_at", models.DateTimeField(blank=True, null=True)),
                ("printer_name", models.CharField(blank=True, max_length=200)),
                ("print_queue_id", models.CharField(blank=True, max_length=100)),
                (
                    "qr_batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="print_jobs",
                        to="qr_management.qrcodebatch",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_print_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="qrcodebatch",
            name="template",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="batches",
                to="qr_management.qrcodetemplate",
            ),
        ),
        migrations.CreateModel(
            name="QRBulkVerification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "verification_type",
                    models.CharField(
                        choices=[
                            ("LOCATION_AUDIT", "Location Audit"),
                            ("DEPARTMENT_AUDIT", "Department Audit"),
                            ("INVENTORY_CHECK", "Inventory Check"),
                            ("COMPLIANCE_CHECK", "Compliance Check"),
                            ("SCHEDULED_AUDIT", "Scheduled Audit"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("PAUSED", "Paused"),
                            ("CANCELLED", "Cancelled"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                (
                    "target_devices",
                    models.JSONField(default=list, help_text="Device IDs to verify"),
                ),
                ("auto_remediate", models.BooleanField(default=False)),
                ("require_photos", models.BooleanField(default=False)),
                ("require_gps", models.BooleanField(default=False)),
                ("total_devices", models.PositiveIntegerField(default=0)),
                ("verified_devices", models.PositiveIntegerField(default=0)),
                ("failed_devices", models.PositiveIntegerField(default=0)),
                ("devices_with_discrepancies", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "results_summary",
                    models.JSONField(
                        default=dict, help_text="Summary of verification results"
                    ),
                ),
                (
                    "export_file",
                    models.FileField(
                        blank=True, null=True, upload_to="bulk_verifications/"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_bulk_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target_departments",
                    models.ManyToManyField(
                        blank=True,
                        related_name="bulk_verifications",
                        to="inventory.department",
                    ),
                ),
                (
                    "target_locations",
                    models.ManyToManyField(
                        blank=True,
                        related_name="bulk_verifications",
                        to="inventory.location",
                    ),
                ),
                (
                    "verification_rules",
                    models.ManyToManyField(
                        blank=True,
                        related_name="bulk_verifications",
                        to="qr_management.qrverificationrule",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QRAnalytics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("DAILY_SCANS", "Daily Scan Count"),
                            ("DEVICE_SCAN_FREQUENCY", "Device Scan Frequency"),
                            ("USER_SCAN_ACTIVITY", "User Scan Activity"),
                            ("LOCATION_SCAN_ACTIVITY", "Location Scan Activity"),
                            ("VERIFICATION_SUCCESS_RATE", "Verification Success Rate"),
                            ("SCAN_TYPE_DISTRIBUTION", "Scan Type Distribution"),
                            ("DISCREPANCY_RATE", "Discrepancy Rate"),
                            ("BATCH_SCAN_EFFICIENCY", "Batch Scan Efficiency"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "aggregation_period",
                    models.CharField(
                        choices=[
                            ("HOUR", "Hourly"),
                            ("DAY", "Daily"),
                            ("WEEK", "Weekly"),
                            ("MONTH", "Monthly"),
                            ("QUARTER", "Quarterly"),
                            ("YEAR", "Yearly"),
                        ],
                        max_length=10,
                    ),
                ),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("metric_value", models.DecimalField(decimal_places=4, max_digits=15)),
                (
                    "additional_data",
                    models.JSONField(
                        default=dict, help_text="Additional metric data and breakdowns"
                    ),
                ),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "calculation_time_ms",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("data_points_count", models.PositiveIntegerField(default=0)),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_analytics",
                        to="inventory.department",
                    ),
                ),
                (
                    "device_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_analytics",
                        to="inventory.devicecategory",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_analytics",
                        to="inventory.location",
                    ),
                ),
            ],
            options={
                "ordering": ["-period_start"],
            },
        ),
        migrations.CreateModel(
            name="QRVerificationResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("passed", models.BooleanField()),
                ("message", models.TextField(blank=True)),
                (
                    "details",
                    models.JSONField(default=dict, help_text="Detailed result data"),
                ),
                ("remediation_attempted", models.BooleanField(default=False)),
                ("remediation_successful", models.BooleanField(default=False)),
                ("remediation_details", models.TextField(blank=True)),
                ("evaluated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "evaluation_time_ms",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verification_results",
                        to="qr_management.qrverificationrule",
                    ),
                ),
                (
                    "scan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verification_results",
                        to="qr_management.qrcodescan",
                    ),
                ),
            ],
            options={
                "ordering": ["-evaluated_at"],
                "unique_together": {("scan", "rule")},
            },
        ),
        migrations.CreateModel(
            name="QRSystemConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("GENERATION", "QR Generation Settings"),
                            ("SCANNING", "QR Scanning Settings"),
                            ("VERIFICATION", "Verification Settings"),
                            ("ANALYTICS", "Analytics Settings"),
                            ("MOBILE", "Mobile App Settings"),
                            ("INTEGRATION", "Integration Settings"),
                            ("TEMPLATES", "Template Settings"),
                            ("BATCH", "Batch Processing Settings"),
                        ],
                        max_length=20,
                    ),
                ),
                ("key", models.CharField(max_length=100)),
                ("value", models.TextField()),
                ("description", models.TextField(blank=True)),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("STRING", "String"),
                            ("INTEGER", "Integer"),
                            ("FLOAT", "Float"),
                            ("BOOLEAN", "Boolean"),
                            ("JSON", "JSON Object"),
                            ("LIST", "List"),
                        ],
                        default="STRING",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_system_setting", models.BooleanField(default=True)),
                ("requires_restart", models.BooleanField(default=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("previous_value", models.TextField(blank=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["category", "key"],
                "unique_together": {("category", "key")},
            },
        ),
        migrations.CreateModel(
            name="QRScanLocation",
            fields=[
                (
                    "scan",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="location_details",
                        serialize=False,
                        to="qr_management.qrcodescan",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="GPS latitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="GPS longitude coordinate",
                        max_digits=11,
                        null=True,
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        blank=True, help_text="Altitude in meters", null=True
                    ),
                ),
                (
                    "accuracy_meters",
                    models.FloatField(
                        blank=True,
                        help_text="Location accuracy radius in meters",
                        null=True,
                    ),
                ),
                (
                    "accuracy_level",
                    models.CharField(
                        choices=[
                            ("HIGH", "High (GPS < 5m)"),
                            ("MEDIUM", "Medium (GPS 5-15m)"),
                            ("LOW", "Low (GPS > 15m)"),
                            ("NETWORK", "Network-based"),
                            ("MANUAL", "Manually Entered"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        default="UNKNOWN",
                        max_length=10,
                    ),
                ),
                (
                    "location_source",
                    models.CharField(
                        choices=[
                            ("GPS", "GPS Coordinates"),
                            ("WIFI", "WiFi-based Location"),
                            ("CELLULAR", "Cellular Tower"),
                            ("BLUETOOTH", "Bluetooth Beacon"),
                            ("MANUAL", "Manual Entry"),
                            ("SYSTEM", "System Location"),
                        ],
                        default="GPS",
                        max_length=15,
                    ),
                ),
                ("street_address", models.CharField(blank=True, max_length=200)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                ("building_name", models.CharField(blank=True, max_length=100)),
                ("floor_number", models.CharField(blank=True, max_length=10)),
                ("room_number", models.CharField(blank=True, max_length=20)),
                (
                    "wifi_ssid",
                    models.CharField(
                        blank=True,
                        help_text="WiFi network SSID if available",
                        max_length=32,
                    ),
                ),
                (
                    "wifi_bssid",
                    models.CharField(
                        blank=True,
                        help_text="WiFi access point MAC address",
                        max_length=17,
                    ),
                ),
                ("cellular_tower_id", models.CharField(blank=True, max_length=50)),
                ("weather_conditions", models.CharField(blank=True, max_length=50)),
                ("temperature_celsius", models.FloatField(blank=True, null=True)),
                (
                    "device_orientation",
                    models.CharField(
                        choices=[
                            ("PORTRAIT", "Portrait"),
                            ("LANDSCAPE", "Landscape"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        default="UNKNOWN",
                        max_length=20,
                    ),
                ),
                (
                    "battery_level",
                    models.PositiveIntegerField(
                        blank=True, help_text="Device battery percentage", null=True
                    ),
                ),
                (
                    "signal_strength",
                    models.IntegerField(
                        blank=True,
                        help_text="Cellular signal strength in dBm",
                        null=True,
                    ),
                ),
                (
                    "location_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the location has been manually verified",
                    ),
                ),
                ("verification_date", models.DateTimeField(blank=True, null=True)),
                ("verification_notes", models.TextField(blank=True)),
                (
                    "distance_to_assigned_location",
                    models.FloatField(
                        blank=True,
                        help_text="Distance in meters to device's assigned location",
                        null=True,
                    ),
                ),
                (
                    "is_location_anomaly",
                    models.BooleanField(
                        default=False,
                        help_text="Flag for location that seems incorrect",
                    ),
                ),
                ("anomaly_reason", models.TextField(blank=True)),
                (
                    "scan_duration_seconds",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time taken to complete the scan",
                        null=True,
                    ),
                ),
                (
                    "movement_detected",
                    models.BooleanField(
                        default=False, help_text="Whether device was moving during scan"
                    ),
                ),
                (
                    "raw_location_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Raw location data from device sensors",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "detected_location",
                    models.ForeignKey(
                        blank=True,
                        help_text="System-detected location based on coordinates",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="qr_scan_locations",
                        to="inventory.location",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_scan_locations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_location",
                    models.ForeignKey(
                        blank=True,
                        help_text="User-verified actual location",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_qr_scan_locations",
                        to="inventory.location",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QRNotification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("SCAN_ALERT", "Scan Alert"),
                            ("DISCREPANCY_ALERT", "Discrepancy Alert"),
                            ("BATCH_COMPLETE", "Batch Complete"),
                            ("VERIFICATION_FAILED", "Verification Failed"),
                            ("CAMPAIGN_UPDATE", "Campaign Update"),
                            ("SYSTEM_ALERT", "System Alert"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Priority"),
                            ("MEDIUM", "Medium Priority"),
                            ("HIGH", "High Priority"),
                            ("URGENT", "Urgent"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("sent_via_email", models.BooleanField(default=False)),
                ("sent_via_push", models.BooleanField(default=False)),
                ("sent_via_sms", models.BooleanField(default=False)),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="qr_management.qrcodebatch",
                    ),
                ),
                (
                    "related_campaign",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="qr_management.qrcampaign",
                    ),
                ),
                (
                    "related_scan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="qr_management.qrcodescan",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["recipient", "is_read"],
                        name="qr_manageme_recipie_d65a09_idx",
                    ),
                    models.Index(
                        fields=["notification_type", "priority"],
                        name="qr_manageme_notific_f763e6_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="qr_manageme_created_5621d8_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="QRIntegrationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "integration_type",
                    models.CharField(
                        choices=[
                            ("API_CALL", "API Call"),
                            ("WEBHOOK", "Webhook"),
                            ("DATA_SYNC", "Data Synchronization"),
                            ("EXPORT", "Data Export"),
                            ("IMPORT", "Data Import"),
                            ("MOBILE_SYNC", "Mobile App Sync"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Success"),
                            ("FAILED", "Failed"),
                            ("PARTIAL", "Partial Success"),
                            ("TIMEOUT", "Timeout"),
                            ("ERROR", "Error"),
                        ],
                        max_length=10,
                    ),
                ),
                ("endpoint", models.CharField(blank=True, max_length=500)),
                ("method", models.CharField(blank=True, max_length=10)),
                ("request_data", models.JSONField(blank=True, default=dict)),
                ("response_data", models.JSONField(blank=True, default=dict)),
                (
                    "response_time_ms",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("records_processed", models.PositiveIntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("error_code", models.CharField(blank=True, max_length=50)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["integration_type", "status"],
                        name="qr_manageme_integra_ac9c1f_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="qr_manageme_created_23dedf_idx"
                    ),
                    models.Index(
                        fields=["status"], name="qr_manageme_status_5a0465_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="qrcodescan",
            index=models.Index(
                fields=["device", "timestamp"], name="qr_manageme_device__0ba3e8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qrcodescan",
            index=models.Index(
                fields=["scanned_by", "timestamp"],
                name="qr_manageme_scanned_36f8b7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="qrcodescan",
            index=models.Index(
                fields=["scan_type", "timestamp"], name="qr_manageme_scan_ty_74d53c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qrcodescan",
            index=models.Index(
                fields=["verification_success"], name="qr_manageme_verific_c7d319_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qrcodescan",
            index=models.Index(
                fields=["batch_scan_id"], name="qr_manageme_batch_s_452fa8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qranalytics",
            index=models.Index(
                fields=["metric_type", "aggregation_period"],
                name="qr_manageme_metric__34fd8a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="qranalytics",
            index=models.Index(
                fields=["period_start", "period_end"],
                name="qr_manageme_period__e6c9c6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="qranalytics",
            index=models.Index(
                fields=["department", "period_start"],
                name="qr_manageme_departm_69739d_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="qranalytics",
            unique_together={
                (
                    "metric_type",
                    "aggregation_period",
                    "period_start",
                    "department",
                    "location",
                    "device_category",
                )
            },
        ),
        migrations.AddIndex(
            model_name="qrscanlocation",
            index=models.Index(fields=["scan"], name="qr_manageme_scan_id_8356fe_idx"),
        ),
        migrations.AddIndex(
            model_name="qrscanlocation",
            index=models.Index(
                fields=["latitude", "longitude"], name="qr_manageme_latitud_a91ec1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qrscanlocation",
            index=models.Index(
                fields=["detected_location"], name="qr_manageme_detecte_b43572_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qrscanlocation",
            index=models.Index(
                fields=["location_verified"], name="qr_manageme_locatio_645256_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qrscanlocation",
            index=models.Index(
                fields=["is_location_anomaly"], name="qr_manageme_is_loca_d03067_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qrscanlocation",
            index=models.Index(
                fields=["created_at"], name="qr_manageme_created_f7261f_idx"
            ),
        ),
    ]
