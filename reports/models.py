# 10. REPORTING & ANALYTICS MODELS
# ================================
from django.db import models
from django.contrib.auth.models import User
from django.core.validators import RegexValidator
from django.utils import timezone
import uuid

class ReportTemplate(models.Model):
    """Predefined report templates"""
    REPORT_CATEGORIES = [
        ('INVENTORY', 'Inventory Reports'),
        ('ASSIGNMENT', 'Assignment Reports'),
        ('MAINTENANCE', 'Maintenance Reports'),
        ('COMPLIANCE', 'Compliance & Audit Reports'),
        ('ANALYTICS', 'Analytics & Insights'),
    ]

    name = models.CharField(max_length=200)
    category = models.CharField(max_length=20, choices=REPORT_CATEGORIES)
    description = models.TextField()
    
    # Report configuration
    sql_query = models.TextField(blank=True)  # Custom SQL for complex reports
    filters = models.JSONField(default=dict, blank=True)  # Default filters
    columns = models.JSONField(default=list, blank=True)  # Report columns
    
    # Access control
    accessible_by_roles = models.JSONField(default=list, help_text="List of user roles that can access this report")
    
    is_active = models.BooleanField(default=True)
    created_by = models.ForeignKey(User, on_delete=models.PROTECT)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.category} - {self.name}"

class ReportGeneration(models.Model):
    """Track report generation history"""
    template = models.ForeignKey(ReportTemplate, on_delete=models.CASCADE, related_name='generations')
    generated_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    
    # Generation parameters
    filters_applied = models.JSONField(default=dict)
    date_range_start = models.DateField(null=True, blank=True)
    date_range_end = models.DateField(null=True, blank=True)
    
    # Results
    total_records = models.PositiveIntegerField(default=0)
    file_path = models.CharField(max_length=500, blank=True)  # Path to generated file
    file_format = models.CharField(max_length=10, default='PDF')  # PDF, Excel, CSV
    
    generation_started = models.DateTimeField(auto_now_add=True)
    generation_completed = models.DateTimeField(null=True, blank=True)
    generation_failed = models.BooleanField(default=False)
    error_message = models.TextField(blank=True)

    def __str__(self):
        return f"{self.template.name} - Generated by {self.generated_by} on {self.generation_started.date()}"