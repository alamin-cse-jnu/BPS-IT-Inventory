# Generated by Django 4.2.7 on 2025-07-05 15:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Assignment",
            fields=[
                ("assignment_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "assignment_type",
                    models.CharField(
                        choices=[
                            ("PERMANENT", "Permanent Assignment"),
                            ("TEMPORARY", "Temporary Assignment"),
                            ("PROJECT", "Project Assignment"),
                            ("POOL", "Pool Assignment"),
                        ],
                        default="PERMANENT",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField(default=django.utils.timezone.now)),
                ("expected_return_date", models.DateField(blank=True, null=True)),
                ("actual_return_date", models.DateField(blank=True, null=True)),
                ("purpose", models.CharField(blank=True, max_length=500)),
                ("notes", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_temporary", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Building",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=10, unique=True)),
                ("address", models.TextField()),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=20)),
                ("head_of_department", models.CharField(blank=True, max_length=100)),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "device_id",
                    models.CharField(
                        max_length=50, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("device_name", models.CharField(max_length=200)),
                ("asset_tag", models.CharField(blank=True, max_length=50, unique=True)),
                ("serial_number", models.CharField(blank=True, max_length=100)),
                ("brand", models.CharField(blank=True, max_length=100)),
                ("model", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("ASSIGNED", "Assigned"),
                            ("MAINTENANCE", "Under Maintenance"),
                            ("RETIRED", "Retired"),
                            ("LOST", "Lost"),
                            ("DAMAGED", "Damaged"),
                            ("DISPOSED", "Disposed"),
                        ],
                        default="AVAILABLE",
                        max_length=20,
                    ),
                ),
                (
                    "purchase_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("purchase_date", models.DateField(blank=True, null=True)),
                ("warranty_start_date", models.DateField(blank=True, null=True)),
                ("warranty_end_date", models.DateField(blank=True, null=True)),
                ("warranty_provider", models.CharField(blank=True, max_length=200)),
                (
                    "processor",
                    models.CharField(
                        blank=True,
                        help_text="e.g., Intel Core i7-1165G7",
                        max_length=200,
                    ),
                ),
                (
                    "memory_ram",
                    models.CharField(
                        blank=True,
                        db_column="ram",
                        help_text="e.g., 16GB DDR4",
                        max_length=100,
                    ),
                ),
                (
                    "storage_capacity",
                    models.CharField(
                        blank=True,
                        db_column="storage",
                        help_text="e.g., 512GB SSD",
                        max_length=100,
                    ),
                ),
                (
                    "operating_system",
                    models.CharField(
                        blank=True, help_text="e.g., Windows 11 Pro", max_length=100
                    ),
                ),
                (
                    "device_condition",
                    models.CharField(
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("FAIR", "Fair"),
                            ("POOR", "Poor"),
                            ("DAMAGED", "Damaged"),
                            ("DEFECTIVE", "Defective"),
                        ],
                        db_column="condition",
                        default="GOOD",
                        max_length=20,
                    ),
                ),
                (
                    "is_critical",
                    models.BooleanField(
                        default=False,
                        help_text="Mark as critical infrastructure device",
                    ),
                ),
                (
                    "expected_life_years",
                    models.PositiveIntegerField(
                        blank=True, help_text="Expected useful life in years", null=True
                    ),
                ),
                ("disposal_date", models.DateField(blank=True, null=True)),
                ("disposal_method", models.CharField(blank=True, max_length=100)),
                ("qr_code", models.TextField(blank=True, help_text="QR code data")),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="devices_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["device_id"],
            },
        ),
        migrations.CreateModel(
            name="DeviceCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Device Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DeviceSubCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="inventory.devicecategory",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Device Subcategories",
                "ordering": ["category", "name"],
                "unique_together": {("category", "name")},
            },
        ),
        migrations.CreateModel(
            name="Floor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("floor_number", models.IntegerField()),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="floors",
                        to="inventory.building",
                    ),
                ),
            ],
            options={
                "ordering": ["building", "floor_number"],
                "unique_together": {("building", "floor_number")},
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="inventory.building",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="inventory.department",
                    ),
                ),
                (
                    "floor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="inventory.floor",
                    ),
                ),
            ],
            options={
                "ordering": ["building", "floor", "department", "room"],
            },
        ),
        migrations.CreateModel(
            name="NotificationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("ASSIGNMENT_DUE", "Assignment Due Date"),
                            ("WARRANTY_EXPIRING", "Warranty Expiring"),
                            ("MAINTENANCE_DUE", "Maintenance Due"),
                            ("DEVICE_MISSING", "Device Missing"),
                            ("UNAUTHORIZED_ACCESS", "Unauthorized Access"),
                            ("SYSTEM_ERROR", "System Error"),
                            ("BULK_OPERATION", "Bulk Operation Completed"),
                        ],
                        max_length=30,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "trigger_conditions",
                    models.JSONField(
                        default=dict,
                        help_text="Conditions that trigger this notification",
                    ),
                ),
                ("notify_email", models.BooleanField(default=True)),
                ("notify_sms", models.BooleanField(default=False)),
                ("notify_in_app", models.BooleanField(default=True)),
                ("notify_device_owner", models.BooleanField(default=True)),
                ("notify_department_head", models.BooleanField(default=False)),
                ("notify_it_admin", models.BooleanField(default=True)),
                ("additional_recipients", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Vendor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "vendor_type",
                    models.CharField(
                        choices=[
                            ("HARDWARE_SUPPLIER", "Hardware Supplier"),
                            ("SOFTWARE_VENDOR", "Software Vendor"),
                            ("SERVICE_PROVIDER", "Service Provider"),
                            ("MAINTENANCE_CONTRACTOR", "Maintenance Contractor"),
                            ("CONSULTANT", "Consultant"),
                        ],
                        max_length=30,
                    ),
                ),
                ("contact_person", models.CharField(blank=True, max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("address", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("tax_id", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Staff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("employee_id", models.CharField(max_length=20, unique=True)),
                ("designation", models.CharField(max_length=100)),
                (
                    "employment_type",
                    models.CharField(
                        choices=[
                            ("PERMANENT", "Permanent"),
                            ("CONTRACT", "Contract"),
                            ("TEMPORARY", "Temporary"),
                            ("CONSULTANT", "Consultant"),
                        ],
                        default="PERMANENT",
                        max_length=20,
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("is_active", models.BooleanField(default=True)),
                ("joining_date", models.DateField(blank=True, null=True)),
                ("leaving_date", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="staff_members",
                        to="inventory.department",
                    ),
                ),
                (
                    "office_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="staff_members",
                        to="inventory.location",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Staff",
                "ordering": ["user__first_name", "user__last_name"],
            },
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("room_number", models.CharField(max_length=20)),
                ("room_name", models.CharField(blank=True, max_length=100)),
                ("capacity", models.PositiveIntegerField(default=1)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rooms",
                        to="inventory.department",
                    ),
                ),
            ],
            options={
                "ordering": ["department", "room_number"],
                "unique_together": {("department", "room_number")},
            },
        ),
        migrations.CreateModel(
            name="MaintenanceSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("PREVENTIVE", "Preventive Maintenance"),
                            ("CORRECTIVE", "Corrective Maintenance"),
                            ("EMERGENCY", "Emergency Repair"),
                            ("UPGRADE", "Hardware/Software Upgrade"),
                            ("INSPECTION", "Routine Inspection"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("WEEKLY", "Weekly"),
                            ("MONTHLY", "Monthly"),
                            ("QUARTERLY", "Quarterly"),
                            ("SEMI_ANNUAL", "Semi-Annual"),
                            ("ANNUAL", "Annual"),
                            ("AS_NEEDED", "As Needed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("next_due_date", models.DateField()),
                ("last_completed_date", models.DateField(blank=True, null=True)),
                ("estimated_duration", models.DurationField(blank=True, null=True)),
                (
                    "cost_estimate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("POSTPONED", "Postponed"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_technician",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="maintenance_assignments",
                        to="inventory.staff",
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_schedules",
                        to="inventory.device",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="maintenance_schedules",
                        to="inventory.vendor",
                    ),
                ),
            ],
            options={
                "ordering": ["next_due_date"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("PREVENTIVE", "Preventive Maintenance"),
                            ("CORRECTIVE", "Corrective Maintenance"),
                            ("EMERGENCY", "Emergency Repair"),
                            ("UPGRADE", "Hardware/Software Upgrade"),
                            ("INSPECTION", "Routine Inspection"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("scheduled_date", models.DateField()),
                ("completed_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("POSTPONED", "Postponed"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                    ),
                ),
                ("work_performed", models.TextField(blank=True)),
                ("parts_used", models.TextField(blank=True)),
                (
                    "cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="maintenance_records_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_records",
                        to="inventory.device",
                    ),
                ),
                (
                    "maintenance_schedule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="records",
                        to="inventory.maintenanceschedule",
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="maintenance_records",
                        to="inventory.staff",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="maintenance_records",
                        to="inventory.vendor",
                    ),
                ),
            ],
            options={
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.AddField(
            model_name="location",
            name="room",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="locations",
                to="inventory.room",
            ),
        ),
        migrations.CreateModel(
            name="DeviceType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "specifications_template",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Template for device specifications",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "subcategory",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="device_types",
                        to="inventory.devicesubcategory",
                    ),
                ),
            ],
            options={
                "ordering": ["subcategory", "name"],
                "unique_together": {("subcategory", "name")},
            },
        ),
        migrations.CreateModel(
            name="DeviceMovement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("movement_date", models.DateTimeField(auto_now_add=True)),
                ("reason", models.CharField(blank=True, max_length=200)),
                ("notes", models.TextField(blank=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movement_logs",
                        to="inventory.device",
                    ),
                ),
                (
                    "from_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="movements_from",
                        to="inventory.location",
                    ),
                ),
                (
                    "moved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="device_movements",
                        to="inventory.staff",
                    ),
                ),
                (
                    "to_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="movements_to",
                        to="inventory.location",
                    ),
                ),
            ],
            options={
                "ordering": ["-movement_date"],
            },
        ),
        migrations.CreateModel(
            name="DeviceHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("STATUS_CHANGE", "Status Change"),
                            ("ASSIGNMENT", "Assignment"),
                            ("RETURN", "Return"),
                            ("TRANSFER", "Transfer"),
                            ("MAINTENANCE", "Maintenance"),
                            ("LOCATION_CHANGE", "Location Change"),
                        ],
                        max_length=20,
                    ),
                ),
                ("old_value", models.CharField(blank=True, max_length=200)),
                ("new_value", models.CharField(blank=True, max_length=200)),
                ("changed_at", models.DateTimeField(auto_now_add=True)),
                ("reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "changed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="device_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history_logs",
                        to="inventory.device",
                    ),
                ),
            ],
            options={
                "ordering": ["-changed_at"],
            },
        ),
        migrations.AddField(
            model_name="device",
            name="device_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices",
                to="inventory.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="assigned_devices",
                to="inventory.location",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="updated_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices_updated",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="vendor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="devices",
                to="inventory.vendor",
            ),
        ),
        migrations.AddField(
            model_name="department",
            name="floor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="departments",
                to="inventory.floor",
            ),
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("CREATE", "Create"),
                            ("UPDATE", "Update"),
                            ("DELETE", "Delete"),
                            ("VIEW", "View"),
                            ("ASSIGN", "Assign"),
                            ("TRANSFER", "Transfer"),
                            ("RETURN", "Return"),
                            ("MAINTENANCE", "Maintenance"),
                            ("LOGIN", "Login"),
                            ("LOGOUT", "Logout"),
                            ("BULK_UPDATE", "Bulk Update"),
                            ("IMPORT", "Import"),
                            ("EXPORT", "Export"),
                        ],
                        max_length=20,
                    ),
                ),
                ("model_name", models.CharField(max_length=50)),
                ("object_id", models.CharField(blank=True, max_length=50)),
                ("object_repr", models.CharField(blank=True, max_length=200)),
                ("changes", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AssignmentHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "change_type",
                    models.CharField(
                        choices=[
                            ("CREATED", "Assignment Created"),
                            ("MODIFIED", "Assignment Modified"),
                            ("RETURNED", "Device Returned"),
                            ("TRANSFERRED", "Assignment Transferred"),
                            ("CANCELLED", "Assignment Cancelled"),
                            ("EXPIRED", "Assignment Expired"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "old_values",
                    models.JSONField(
                        blank=True, default=dict, help_text="Previous assignment values"
                    ),
                ),
                (
                    "new_values",
                    models.JSONField(
                        blank=True, default=dict, help_text="New assignment values"
                    ),
                ),
                ("reason", models.CharField(blank=True, max_length=200)),
                ("notes", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment_history",
                        to="inventory.assignment",
                    ),
                ),
                (
                    "changed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assignment_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddField(
            model_name="assignment",
            name="assigned_to_department",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="device_assignments",
                to="inventory.department",
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="assigned_to_location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="device_assignments",
                to="inventory.location",
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="assigned_to_staff",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="device_assignments",
                to="inventory.staff",
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="assignments_created",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="device",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assignments",
                to="inventory.device",
            ),
        ),
        migrations.CreateModel(
            name="SystemConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("GENERAL", "General Settings"),
                            ("QR_CODE", "QR Code Settings"),
                            ("MAINTENANCE", "Maintenance Settings"),
                            ("NOTIFICATION", "Notification Settings"),
                            ("SECURITY", "Security Settings"),
                            ("INTEGRATION", "Integration Settings"),
                        ],
                        max_length=20,
                    ),
                ),
                ("key", models.CharField(max_length=100)),
                ("value", models.TextField()),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("category", "key")},
            },
        ),
        migrations.CreateModel(
            name="ServiceRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "request_id",
                    models.CharField(
                        help_text="Auto-generated service request ID",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("REPAIR", "Repair Request"),
                            ("MAINTENANCE", "Preventive Maintenance"),
                            ("UPGRADE", "Hardware/Software Upgrade"),
                            ("REPLACEMENT", "Component Replacement"),
                            ("CLEANING", "Device Cleaning"),
                            ("INSPECTION", "Safety Inspection"),
                            ("CALIBRATION", "Device Calibration"),
                            ("OTHER", "Other Service"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the service required"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("APPROVED", "Approved"),
                            ("IN_PROGRESS", "In Progress"),
                            ("ON_HOLD", "On Hold"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Priority"),
                            ("MEDIUM", "Medium Priority"),
                            ("HIGH", "High Priority"),
                            ("URGENT", "Urgent"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                (
                    "requested_date",
                    models.DateField(help_text="Preferred date for service"),
                ),
                ("scheduled_date", models.DateField(blank=True, null=True)),
                ("completed_date", models.DateField(blank=True, null=True)),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("approval_date", models.DateTimeField(blank=True, null=True)),
                (
                    "work_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes from technician performing the work",
                    ),
                ),
                (
                    "completion_notes",
                    models.TextField(
                        blank=True, help_text="Final notes upon completion"
                    ),
                ),
                (
                    "attachments",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of attachment file references",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_service_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_service_requests",
                        to="inventory.staff",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_service_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_requests",
                        to="inventory.device",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="requested_services",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        help_text="External service provider if applicable",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="inventory.vendor",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["device", "-created_at"],
                        name="inventory_s_device__737c1a_idx",
                    ),
                    models.Index(
                        fields=["status", "priority"],
                        name="inventory_s_status_70bf0c_idx",
                    ),
                    models.Index(
                        fields=["requested_date"], name="inventory_s_request_0bdfdf_idx"
                    ),
                    models.Index(
                        fields=["assigned_to", "status"],
                        name="inventory_s_assigne_d3e89e_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("INFO", "Information"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("SUCCESS", "Success"),
                        ],
                        default="INFO",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SENT", "Sent"),
                            ("FAILED", "Failed"),
                            ("READ", "Read"),
                        ],
                        default="PENDING",
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("sent_via_email", models.BooleanField(default=False)),
                ("sent_via_sms", models.BooleanField(default=False)),
                ("sent_via_app", models.BooleanField(default=False)),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_assignment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="inventory.assignment",
                    ),
                ),
                (
                    "related_device",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="inventory.device",
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="inventory.notificationrule",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["recipient", "status"],
                        name="inventory_n_recipie_57ad9b_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="inventory_n_created_c407b9_idx"
                    ),
                    models.Index(
                        fields=["related_device"], name="inventory_n_related_a10433_idx"
                    ),
                ],
            },
        ),
        migrations.AlterUniqueTogether(
            name="location",
            unique_together={("building", "floor", "department", "room")},
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["device_id"], name="inventory_d_device__a3b9fe_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["asset_tag"], name="inventory_d_asset_t_4bef13_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["serial_number"], name="inventory_d_serial__ed8962_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(fields=["status"], name="inventory_d_status_458222_idx"),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["device_type"], name="inventory_d_device__4b4a89_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="department",
            unique_together={("floor", "code")},
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["user", "timestamp"], name="inventory_a_user_id_55d86c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["action", "timestamp"], name="inventory_a_action_92f4bf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["model_name", "timestamp"],
                name="inventory_a_model_n_d6748d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assignmenthistory",
            index=models.Index(
                fields=["assignment", "-timestamp"],
                name="inventory_a_assignm_97f8dd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assignmenthistory",
            index=models.Index(
                fields=["changed_by", "-timestamp"],
                name="inventory_a_changed_7202c2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assignmenthistory",
            index=models.Index(
                fields=["change_type", "-timestamp"],
                name="inventory_a_change__55122d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["device", "is_active"], name="inventory_a_device__0711fc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["assigned_to_staff", "is_active"],
                name="inventory_a_assigne_e2241b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["start_date"], name="inventory_a_start_d_4e60f5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["expected_return_date"], name="inventory_a_expecte_266789_idx"
            ),
        ),
    ]
