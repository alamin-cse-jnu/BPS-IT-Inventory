# Generated by Django 4.2.7 on 2025-06-22 06:47

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('assignment_type', models.CharField(choices=[('PERSONAL', 'Personal Assignment'), ('DEPARTMENTAL', 'Departmental Assignment'), ('LOCATION', 'Location Assignment'), ('PROJECT', 'Project Assignment'), ('TEMPORARY', 'Temporary Assignment'), ('POOL', 'Device Pool'), ('MAINTENANCE', 'Maintenance Assignment')], max_length=20)),
                ('project_name', models.CharField(blank=True, max_length=200)),
                ('project_code', models.CharField(blank=True, max_length=50)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('expected_return_date', models.DateField(blank=True, null=True)),
                ('actual_return_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_temporary', models.BooleanField(default=False)),
                ('purpose', models.TextField(blank=True, help_text='Purpose of assignment')),
                ('conditions', models.TextField(blank=True, help_text='Special conditions or requirements')),
                ('notes', models.TextField(blank=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_assignments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10)),
                ('address', models.TextField()),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20)),
                ('head_of_department', models.CharField(blank=True, max_length=100)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('asset_tag', models.CharField(max_length=50, unique=True)),
                ('qr_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('device_name', models.CharField(max_length=200)),
                ('brand', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('mac_address', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', 'Invalid MAC address format')])),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('specifications', models.JSONField(blank=True, default=dict, help_text='Technical specifications as key-value pairs')),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('ASSIGNED', 'Assigned'), ('IN_USE', 'In Use'), ('MAINTENANCE', 'Under Maintenance'), ('REPAIR', 'Under Repair'), ('RETIRED', 'Retired'), ('DISPOSED', 'Disposed'), ('LOST', 'Lost/Missing'), ('DAMAGED', 'Damaged')], default='AVAILABLE', max_length=20)),
                ('condition', models.CharField(choices=[('NEW', 'New'), ('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor'), ('DAMAGED', 'Damaged'), ('NOT_WORKING', 'Not Working')], default='NEW', max_length=20)),
                ('purchase_date', models.DateField()),
                ('purchase_order_number', models.CharField(blank=True, max_length=50)),
                ('purchase_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('warranty_start_date', models.DateField()),
                ('warranty_end_date', models.DateField()),
                ('warranty_type', models.CharField(default='Standard', max_length=50)),
                ('support_contract', models.TextField(blank=True)),
                ('amc_details', models.TextField(blank=True, help_text='Annual Maintenance Contract details')),
                ('deployment_date', models.DateField(blank=True, null=True)),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('retirement_date', models.DateField(blank=True, null=True)),
                ('disposal_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('is_critical', models.BooleanField(default=False, help_text='Critical infrastructure device')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_devices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category_type', models.CharField(choices=[('DATA_CENTER', 'Data Centre Equipment'), ('NETWORK', 'Network Equipment'), ('COMPUTING', 'End-User Computing Devices'), ('DISPLAY', 'Projectors and Displays'), ('PERIPHERAL', 'Peripherals'), ('STORAGE', 'Storage Devices'), ('AUDIO_VIDEO', 'Audio/Video Equipment'), ('MOBILE', 'Mobile Devices'), ('SECURITY', 'Security Equipment'), ('OTHER', 'Other Equipment')], max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Device Categories',
            },
        ),
        migrations.CreateModel(
            name='DeviceSubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='inventory.devicecategory')),
            ],
            options={
                'verbose_name_plural': 'Device Sub-Categories',
                'unique_together': {('category', 'code')},
            },
        ),
        migrations.CreateModel(
            name='MaintenanceSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_type', models.CharField(choices=[('PREVENTIVE', 'Preventive Maintenance'), ('CORRECTIVE', 'Corrective Maintenance'), ('PREDICTIVE', 'Predictive Maintenance'), ('EMERGENCY', 'Emergency Maintenance'), ('UPGRADE', 'Upgrade Maintenance')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('scheduled_date', models.DateField()),
                ('scheduled_time', models.TimeField(blank=True, null=True)),
                ('estimated_duration', models.DurationField(blank=True, null=True)),
                ('actual_start_date', models.DateTimeField(blank=True, null=True)),
                ('actual_end_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('POSTPONED', 'Postponed')], default='SCHEDULED', max_length=20)),
                ('performed_by', models.CharField(blank=True, max_length=200)),
                ('technician_name', models.CharField(blank=True, max_length=100)),
                ('technician_contact', models.CharField(blank=True, max_length=50)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('parts_used', models.TextField(blank=True)),
                ('work_performed', models.TextField(blank=True)),
                ('issues_found', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_maintenance', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_schedules', to='inventory.device')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='updated_maintenance', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Bangladesh Parliament Secretariat', max_length=200)),
                ('code', models.CharField(default='BPS', max_length=10, unique=True)),
                ('address', models.TextField()),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('full_name', models.CharField(max_length=200)),
                ('designation', models.CharField(max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('extension', models.CharField(blank=True, max_length=10)),
                ('security_clearance', models.CharField(choices=[('PUBLIC', 'Public'), ('RESTRICTED', 'Restricted'), ('CONFIDENTIAL', 'Confidential'), ('SECRET', 'Secret'), ('TOP_SECRET', 'Top Secret')], default='PUBLIC', max_length=20)),
                ('date_joined', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff_members', to='inventory.department')),
                ('reporting_manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='inventory.staff')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Staff',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('vendor_code', models.CharField(max_length=20, unique=True)),
                ('vendor_type', models.CharField(choices=[('MANUFACTURER', 'Manufacturer'), ('DISTRIBUTOR', 'Distributor'), ('RESELLER', 'Reseller'), ('SERVICE_PROVIDER', 'Service Provider'), ('MAINTENANCE', 'Maintenance Provider')], max_length=20)),
                ('contact_person', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField()),
                ('website', models.URLField(blank=True)),
                ('tax_id', models.CharField(blank=True, max_length=50)),
                ('registration_number', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('performance_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Rating out of 5.00', max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StaffAssignmentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designation', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.department')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_history', to='inventory.staff')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('room_number', models.CharField(max_length=20)),
                ('room_type', models.CharField(choices=[('OFFICE', 'Office Room'), ('MEETING', 'Meeting Room'), ('DATA_CENTER', 'Data Center'), ('SERVER_ROOM', 'Server Room'), ('NETWORK_CLOSET', 'Network Closet'), ('STORAGE', 'Storage Room'), ('MAINTENANCE', 'Maintenance Room'), ('OTHER', 'Other')], default='OFFICE', max_length=20)),
                ('capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('environmental_conditions', models.TextField(blank=True, help_text='Temperature, humidity specifications')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='inventory.department')),
            ],
            options={
                'unique_together': {('department', 'room_number')},
            },
        ),
        migrations.CreateModel(
            name='NotificationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('event_type', models.CharField(choices=[('ASSIGNMENT_DUE', 'Assignment Due Date'), ('WARRANTY_EXPIRING', 'Warranty Expiring'), ('MAINTENANCE_DUE', 'Maintenance Due'), ('DEVICE_MISSING', 'Device Missing'), ('UNAUTHORIZED_ACCESS', 'Unauthorized Access'), ('SYSTEM_ERROR', 'System Error'), ('BULK_OPERATION', 'Bulk Operation Completed')], max_length=30)),
                ('description', models.TextField()),
                ('trigger_conditions', models.JSONField(default=dict, help_text='Conditions that trigger this notification')),
                ('notify_email', models.BooleanField(default=True)),
                ('notify_sms', models.BooleanField(default=False)),
                ('notify_in_app', models.BooleanField(default=True)),
                ('notify_device_owner', models.BooleanField(default=True)),
                ('notify_department_head', models.BooleanField(default=False)),
                ('notify_it_admin', models.BooleanField(default=True)),
                ('additional_recipients', models.JSONField(default=list, help_text='List of additional email addresses')),
                ('email_subject_template', models.CharField(max_length=200)),
                ('email_body_template', models.TextField()),
                ('sms_template', models.CharField(blank=True, max_length=160)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SENT', 'Sent'), ('FAILED', 'Failed'), ('READ', 'Read')], default='PENDING', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('delivery_attempts', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.assignment')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.device')),
                ('maintenance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.maintenanceschedule')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='inventory.notificationrule')),
            ],
        ),
        migrations.AddField(
            model_name='maintenanceschedule',
            name='vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.vendor'),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location_code', models.CharField(max_length=20)),
                ('location_type', models.CharField(choices=[('DESK', 'Desk Position'), ('RACK', 'Server Rack'), ('RACK_UNIT', 'Rack Unit (U)'), ('WALL_MOUNT', 'Wall Mount'), ('FLOOR_STAND', 'Floor Stand'), ('CEILING_MOUNT', 'Ceiling Mount'), ('MOBILE', 'Mobile/Portable'), ('STORAGE_SHELF', 'Storage Shelf'), ('OTHER', 'Other')], default='DESK', max_length=20)),
                ('coordinates', models.CharField(blank=True, help_text='Grid position or coordinates', max_length=50)),
                ('capacity', models.PositiveIntegerField(default=1, help_text='Number of devices this location can hold')),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='inventory.room')),
            ],
            options={
                'unique_together': {('room', 'location_code')},
            },
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('floor_number', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='floors', to='inventory.building')),
            ],
            options={
                'unique_together': {('building', 'floor_number')},
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True)),
                ('typical_specifications', models.JSONField(blank=True, default=dict, help_text='Common specifications for this device type')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_types', to='inventory.devicesubcategory')),
            ],
            options={
                'unique_together': {('subcategory', 'code')},
            },
        ),
        migrations.CreateModel(
            name='DeviceMovementLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('qr_scanned', models.BooleanField(default=False)),
                ('scan_timestamp', models.DateTimeField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('authorized_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authorized_movements', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movement_logs', to='inventory.device')),
                ('from_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements_from', to='inventory.location')),
                ('moved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='device_movements', to='inventory.staff')),
                ('to_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements_to', to='inventory.location')),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='device_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='inventory.devicetype'),
        ),
        migrations.AddField(
            model_name='device',
            name='updated_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='updated_devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='inventory.vendor'),
        ),
        migrations.AddField(
            model_name='department',
            name='floor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='inventory.floor'),
        ),
        migrations.CreateModel(
            name='DataImportLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_type', models.CharField(choices=[('DEVICES', 'Device Import'), ('STAFF', 'Staff Import'), ('LOCATIONS', 'Location Import'), ('ASSIGNMENTS', 'Assignment Import')], max_length=20)),
                ('file_name', models.CharField(max_length=200)),
                ('file_path', models.CharField(max_length=500)),
                ('total_records', models.PositiveIntegerField(default=0)),
                ('successful_imports', models.PositiveIntegerField(default=0)),
                ('failed_imports', models.PositiveIntegerField(default=0)),
                ('errors', models.JSONField(blank=True, default=list)),
                ('warnings', models.JSONField(blank=True, default=list)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('imported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='building',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buildings', to='inventory.organization'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('VIEW', 'View'), ('ASSIGN', 'Assign'), ('TRANSFER', 'Transfer'), ('RETURN', 'Return'), ('MAINTENANCE', 'Maintenance'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout')], max_length=20)),
                ('model_name', models.CharField(max_length=50)),
                ('object_id', models.CharField(blank=True, max_length=50)),
                ('object_repr', models.CharField(blank=True, max_length=200)),
                ('changes', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssignmentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=50)),
                ('reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history_records', to='inventory.assignment')),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_history', to='inventory.device')),
                ('new_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.department')),
                ('new_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.location')),
                ('new_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.staff')),
                ('previous_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.department')),
                ('previous_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.location')),
                ('previous_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.staff')),
            ],
        ),
        migrations.AddField(
            model_name='assignment',
            name='assigned_to_department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_devices', to='inventory.department'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='assigned_to_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_devices', to='inventory.location'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='assigned_to_staff',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_devices', to='inventory.staff'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_assignments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assignment',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='inventory.device'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='requested_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='requested_assignments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assignment',
            name='updated_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='updated_assignments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='APIAccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('method', models.CharField(max_length=10)),
                ('endpoint', models.CharField(max_length=200)),
                ('request_data', models.JSONField(blank=True, default=dict)),
                ('status_code', models.PositiveIntegerField()),
                ('response_time', models.FloatField(help_text='Response time in seconds')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('GENERAL', 'General Settings'), ('QR_CODE', 'QR Code Settings'), ('MAINTENANCE', 'Maintenance Settings'), ('NOTIFICATION', 'Notification Settings'), ('SECURITY', 'Security Settings'), ('INTEGRATION', 'Integration Settings')], max_length=20)),
                ('key', models.CharField(max_length=100)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('category', 'key')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='department',
            unique_together={('floor', 'code')},
        ),
        migrations.AlterUniqueTogether(
            name='building',
            unique_together={('organization', 'code')},
        ),
    ]
