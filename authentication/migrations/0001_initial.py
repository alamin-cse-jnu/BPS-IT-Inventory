# Generated by Django 4.2.7 on 2025-07-08 07:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("inventory", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("IT_ADMINISTRATOR", "IT Administrator"),
                            ("IT_OFFICER", "IT Officer"),
                            ("DEPARTMENT_HEAD", "Department Head"),
                            ("MANAGER", "Manager"),
                            ("GENERAL_STAFF", "General Staff"),
                            ("AUDITOR", "Auditor"),
                            ("VENDOR", "Vendor/External"),
                            ("READONLY", "Read Only User"),
                        ],
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("display_name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "permissions",
                    models.JSONField(
                        default=dict, help_text="Detailed permissions configuration"
                    ),
                ),
                (
                    "can_view_all_devices",
                    models.BooleanField(
                        default=False,
                        help_text="Can view devices across all departments",
                    ),
                ),
                (
                    "can_manage_assignments",
                    models.BooleanField(
                        default=False, help_text="Can create/modify assignments"
                    ),
                ),
                (
                    "can_approve_requests",
                    models.BooleanField(
                        default=False, help_text="Can approve assignment requests"
                    ),
                ),
                (
                    "can_generate_reports",
                    models.BooleanField(
                        default=True, help_text="Can generate and view reports"
                    ),
                ),
                (
                    "can_manage_users",
                    models.BooleanField(
                        default=False, help_text="Can manage user accounts"
                    ),
                ),
                (
                    "can_system_admin",
                    models.BooleanField(
                        default=False, help_text="Can access system administration"
                    ),
                ),
                (
                    "can_manage_maintenance",
                    models.BooleanField(
                        default=False, help_text="Can manage maintenance schedules"
                    ),
                ),
                (
                    "can_manage_vendors",
                    models.BooleanField(
                        default=False, help_text="Can manage vendor information"
                    ),
                ),
                (
                    "can_bulk_operations",
                    models.BooleanField(
                        default=False, help_text="Can perform bulk operations"
                    ),
                ),
                (
                    "can_export_data",
                    models.BooleanField(
                        default=False, help_text="Can export system data"
                    ),
                ),
                (
                    "restricted_to_own_department",
                    models.BooleanField(
                        default=True, help_text="Restrict access to own department only"
                    ),
                ),
                (
                    "can_view_financial_data",
                    models.BooleanField(
                        default=False, help_text="Can view purchase prices and costs"
                    ),
                ),
                (
                    "can_scan_qr_codes",
                    models.BooleanField(
                        default=True, help_text="Can scan QR codes for verification"
                    ),
                ),
                (
                    "can_generate_qr_codes",
                    models.BooleanField(
                        default=False, help_text="Can generate QR codes"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["display_name"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("LIGHT", "Light Theme"),
                            ("DARK", "Dark Theme"),
                            ("AUTO", "Auto (System)"),
                        ],
                        default="LIGHT",
                        max_length=10,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("bn", "Bengali")],
                        default="en",
                        max_length=5,
                    ),
                ),
                ("timezone", models.CharField(default="Asia/Dhaka", max_length=50)),
                (
                    "dashboard_layout",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Dashboard widget layout preferences",
                    ),
                ),
                (
                    "default_items_per_page",
                    models.PositiveIntegerField(
                        default=25,
                        help_text="Default number of items to show per page",
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True, help_text="Receive email notifications"
                    ),
                ),
                (
                    "sms_notifications",
                    models.BooleanField(
                        default=False, help_text="Receive SMS notifications"
                    ),
                ),
                (
                    "in_app_notifications",
                    models.BooleanField(
                        default=True, help_text="Show in-app notifications"
                    ),
                ),
                (
                    "notification_frequency",
                    models.CharField(
                        choices=[
                            ("IMMEDIATE", "Immediate"),
                            ("HOURLY", "Hourly Digest"),
                            ("DAILY", "Daily Digest"),
                            ("WEEKLY", "Weekly Digest"),
                        ],
                        default="IMMEDIATE",
                        max_length=20,
                    ),
                ),
                ("mobile_push_notifications", models.BooleanField(default=True)),
                (
                    "mobile_device_tokens",
                    models.JSONField(
                        blank=True, default=list, help_text="Mobile device FCM tokens"
                    ),
                ),
                (
                    "require_2fa",
                    models.BooleanField(
                        default=False, help_text="Require two-factor authentication"
                    ),
                ),
                (
                    "session_timeout_minutes",
                    models.PositiveIntegerField(
                        default=480,
                        help_text="Session timeout in minutes",
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(1440),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("last_password_change", models.DateTimeField(blank=True, null=True)),
                (
                    "default_department",
                    models.ForeignKey(
                        blank=True,
                        help_text="Default department context for the user",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="inventory.department",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["user__username"],
            },
        ),
        migrations.CreateModel(
            name="PasswordHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password_hash", models.CharField(max_length=128)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="APIToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this token", max_length=100
                    ),
                ),
                (
                    "token_type",
                    models.CharField(
                        choices=[
                            ("USER", "User Token"),
                            ("APPLICATION", "Application Token"),
                            ("INTEGRATION", "Integration Token"),
                        ],
                        default="USER",
                        max_length=15,
                    ),
                ),
                ("token_key", models.CharField(max_length=64, unique=True)),
                ("token_hash", models.CharField(max_length=128)),
                (
                    "allowed_ips",
                    models.JSONField(
                        blank=True, default=list, help_text="Allowed IP addresses"
                    ),
                ),
                (
                    "permissions",
                    models.JSONField(
                        blank=True, default=dict, help_text="API permissions"
                    ),
                ),
                (
                    "rate_limit",
                    models.PositiveIntegerField(
                        default=1000, help_text="Requests per hour"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_key", models.CharField(max_length=40, unique=True)),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("WEB", "Web Browser"),
                            ("MOBILE", "Mobile App"),
                            ("API", "API Access"),
                            ("ADMIN", "Admin Interface"),
                        ],
                        default="WEB",
                        max_length=10,
                    ),
                ),
                ("login_time", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("logout_time", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                (
                    "device_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Device and browser information",
                    ),
                ),
                (
                    "location_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Geographic location data"
                    ),
                ),
                (
                    "is_suspicious",
                    models.BooleanField(
                        default=False, help_text="Flagged for suspicious activity"
                    ),
                ),
                ("failed_login_attempts", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-login_time"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="authenticat_user_id_f427c8_idx",
                    ),
                    models.Index(
                        fields=["session_key"], name="authenticat_session_1fea71_idx"
                    ),
                    models.Index(
                        fields=["ip_address"], name="authenticat_ip_addr_d6bbd8_idx"
                    ),
                    models.Index(
                        fields=["last_activity"], name="authenticat_last_ac_04a1e9_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserRoleAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="When this role assignment becomes active",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="When this role assignment expires",
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_primary_role",
                    models.BooleanField(
                        default=False, help_text="Primary role for the user"
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this role assignment",
                    ),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assigned_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        help_text="Department scope for this role assignment",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.department",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assignments",
                        to="authentication.userrole",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-is_primary_role", "start_date"],
                "unique_together": {("user", "role", "department")},
            },
        ),
        migrations.CreateModel(
            name="UserPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preference_type",
                    models.CharField(
                        choices=[
                            ("THEME", "Theme Preference"),
                            ("LANGUAGE", "Language Setting"),
                            ("NOTIFICATION", "Notification Settings"),
                            ("DASHBOARD", "Dashboard Layout"),
                            ("DISPLAY", "Display Options"),
                            ("SECURITY", "Security Settings"),
                            ("REPORTING", "Report Preferences"),
                            ("SYSTEM", "System Settings"),
                        ],
                        max_length=20,
                    ),
                ),
                ("preference_key", models.CharField(max_length=50)),
                ("preference_value", models.TextField()),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("light", "Light Theme"),
                            ("dark", "Dark Theme"),
                            ("auto", "Auto (System)"),
                        ],
                        default="light",
                        max_length=10,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("bn", "Bengali")],
                        default="en",
                        max_length=5,
                    ),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=False)),
                ("desktop_notifications", models.BooleanField(default=True)),
                (
                    "notification_frequency",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate"),
                            ("hourly", "Hourly Digest"),
                            ("daily", "Daily Digest"),
                            ("weekly", "Weekly Digest"),
                            ("never", "Never"),
                        ],
                        default="immediate",
                        max_length=20,
                    ),
                ),
                (
                    "dashboard_layout",
                    models.JSONField(
                        default=dict,
                        help_text="Dashboard widget layout and preferences",
                    ),
                ),
                ("default_page_size", models.PositiveIntegerField(default=25)),
                (
                    "session_timeout",
                    models.PositiveIntegerField(
                        default=60, help_text="Session timeout in minutes"
                    ),
                ),
                ("require_password_change", models.BooleanField(default=False)),
                (
                    "additional_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional user-specific settings",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["user", "preference_type"],
                "unique_together": {("user", "preference_type", "preference_key")},
            },
        ),
        migrations.CreateModel(
            name="UserActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("LOGIN", "User Login"),
                            ("LOGOUT", "User Logout"),
                            ("VIEW", "View Record"),
                            ("CREATE", "Create Record"),
                            ("UPDATE", "Update Record"),
                            ("DELETE", "Delete Record"),
                            ("EXPORT", "Export Data"),
                            ("IMPORT", "Import Data"),
                            ("PRINT", "Print Document"),
                            ("DOWNLOAD", "Download File"),
                            ("SEARCH", "Search Operation"),
                            ("REPORT", "Generate Report"),
                            ("ASSIGNMENT", "Device Assignment"),
                            ("QR_SCAN", "QR Code Scan"),
                            ("ADMIN", "Admin Action"),
                            ("API", "API Access"),
                            ("ERROR", "Error/Exception"),
                            ("SECURITY", "Security Event"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the activity"),
                ),
                (
                    "object_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of object affected (e.g., 'Device', 'Assignment')",
                        max_length=50,
                    ),
                ),
                (
                    "object_id",
                    models.CharField(
                        blank=True, help_text="ID of the affected object", max_length=50
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("session_key", models.CharField(blank=True, max_length=40)),
                ("is_successful", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional activity-specific data",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "duration_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Activity duration in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "-timestamp"],
                        name="authenticat_user_id_062063_idx",
                    ),
                    models.Index(
                        fields=["activity_type", "-timestamp"],
                        name="authenticat_activit_c2ca16_idx",
                    ),
                    models.Index(
                        fields=["is_successful", "-timestamp"],
                        name="authenticat_is_succ_a25356_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "-timestamp"],
                        name="authenticat_ip_addr_1f24e1_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TwoFactorAuth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("TOTP", "Time-based OTP (Authenticator App)"),
                            ("SMS", "SMS Code"),
                            ("EMAIL", "Email Code"),
                            ("BACKUP", "Backup Codes"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "secret_key",
                    models.CharField(
                        blank=True, help_text="TOTP secret key", max_length=32
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("email_address", models.EmailField(blank=True, max_length=254)),
                (
                    "backup_codes",
                    models.JSONField(
                        blank=True, default=list, help_text="List of backup codes"
                    ),
                ),
                ("is_enabled", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="two_factor_auth",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "method")},
            },
        ),
        migrations.CreateModel(
            name="SecurityQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("mother_maiden", "What is your mother's maiden name?"),
                            ("first_pet", "What was the name of your first pet?"),
                            ("birth_city", "What city were you born in?"),
                            ("first_school", "What was the name of your first school?"),
                            (
                                "favorite_teacher",
                                "What was the name of your favorite teacher?",
                            ),
                            (
                                "childhood_friend",
                                "What was the name of your childhood best friend?",
                            ),
                            ("first_car", "What was the make of your first car?"),
                            ("street_grew_up", "What street did you grow up on?"),
                            ("custom", "Custom Question"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "custom_question",
                    models.CharField(
                        blank=True,
                        help_text="Used when question_type is 'custom'",
                        max_length=200,
                    ),
                ),
                (
                    "answer_hash",
                    models.CharField(
                        help_text="Hashed security answer", max_length=128
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="security_questions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["user", "-created_at"],
                "unique_together": {("user", "question_type")},
            },
        ),
        migrations.CreateModel(
            name="LoginAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("username", models.CharField(max_length=150)),
                (
                    "attempt_type",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Successful Login"),
                            ("FAILED_PASSWORD", "Failed - Wrong Password"),
                            ("FAILED_USERNAME", "Failed - Wrong Username"),
                            ("FAILED_LOCKED", "Failed - Account Locked"),
                            ("FAILED_DISABLED", "Failed - Account Disabled"),
                            ("FAILED_SUSPICIOUS", "Failed - Suspicious Activity"),
                        ],
                        max_length=20,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("location_data", models.JSONField(blank=True, default=dict)),
                ("device_fingerprint", models.CharField(blank=True, max_length=64)),
                ("is_suspicious", models.BooleanField(default=False)),
                ("blocked_by_security", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="login_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["username", "timestamp"],
                        name="authenticat_usernam_69bd25_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "timestamp"],
                        name="authenticat_ip_addr_95756c_idx",
                    ),
                    models.Index(
                        fields=["attempt_type"], name="authenticat_attempt_2eab25_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ApiKey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this API key", max_length=100
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        help_text="The actual API key", max_length=128, unique=True
                    ),
                ),
                (
                    "key_type",
                    models.CharField(
                        choices=[
                            ("MOBILE", "Mobile Application"),
                            ("INTEGRATION", "System Integration"),
                            ("WEBHOOK", "Webhook Access"),
                            ("REPORTING", "Reporting API"),
                            ("READ_ONLY", "Read-Only Access"),
                            ("FULL_ACCESS", "Full Access"),
                        ],
                        default="READ_ONLY",
                        max_length=20,
                    ),
                ),
                (
                    "permissions",
                    models.JSONField(
                        default=list,
                        help_text="List of specific permissions for this key",
                    ),
                ),
                (
                    "allowed_ips",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of allowed IP addresses (empty = any IP)",
                    ),
                ),
                ("usage_count", models.PositiveIntegerField(default=0)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("last_used_ip", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "rate_limit_per_hour",
                    models.PositiveIntegerField(
                        default=1000, help_text="Maximum API calls per hour"
                    ),
                ),
                ("current_hour_usage", models.PositiveIntegerField(default=0)),
                ("rate_limit_reset", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Optional expiration date", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-created_at"],
                        name="authenticat_user_id_a53c3f_idx",
                    ),
                    models.Index(fields=["key"], name="authenticat_key_bb02b2_idx"),
                    models.Index(
                        fields=["is_active", "expires_at"],
                        name="authenticat_is_acti_3ce9d6_idx",
                    ),
                ],
            },
        ),
    ]
